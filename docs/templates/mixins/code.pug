mixin code(source)
	- function deIndent(text) {
	-  text = text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
	-  let match = text.match(/^(\t)*/);
	-  let minIndent = match? match.length : 0;
	-
	-  for (const line of text.split('\n')) {
	-    const indent = line.match(/^(\t)*/).length;
	-    if (indent < minIndent) {
	-      minIndent = indent;
	-    }
	-  }
	-
	-  return text.replace(/^\s*|\s*$/g, '').replace(RegExp(`^\\t{${minIndent}}`, 'gm'), '');
	- }


	//- TODO: add class keyword
	- function formatCode(code) {
	-  const rules = [];
	-  rules.push({pattern: '([\'"].+["\'])|((?<=#include )&lt;.+&gt;)', type: 'string'});
	-  rules.push({pattern: '\\b(void|auto|bool|u?int(\\d+_t)?)\\b', type: 'typename'});
	-  rules.push({pattern: '\\b(new|delete|for|while|do|if|using|virtual|override|return)\\b', type: 'keyword'});
	-  rules.push({pattern: '\\b(public|protected|private)\\b', type: 'modifier'});
	-  rules.push({pattern: '\\b\\w+::', type: 'scope'});
	-  rules.push({pattern: '#\\w+?\\b', type: 'macro'});
	-  rules.push({pattern: '\\b\\w+(&lt;.*&gt;)?\\b(?=\\(.*\\))', type: 'function'});
	-  rules.push({pattern: '(?<!#.*)&lt;.+?&gt;', type: 'template'});
	-  rules.push({pattern: '\\b(\\d+?)\\b', type: 'number'});
	-  rules.push({pattern: '//.*|/\\*.*?\\*/', type: 'comment'});
	-
	-  for (const rule of rules) {
	-    code = code.replace(RegExp(rule.pattern, 'g'), `<span class="highlight ${rule.type}">$&</span>`);
	-  }
	-  return code;
	- }


	pre
		each line in formatCode(deIndent(source)).split('\n')
			div.code-line!= line
